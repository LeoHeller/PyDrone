"""Finds the best motor based of a json file generated by get_motors.py."""
import json


class optimizer():
    """Find the most optimized motor based of a list of motors."""

    def __init__(self, file_name):
        """Init with arg.

        Arguments:
            file_name {str} -- file from which to read
        """
        self.file_name = file_name
        self.file = self.load_file()
        self.best = ""
        self.find_best()

    def load_file(self):
        """Load a file."""
        with open(self.file_name, "r") as fi:
            return json.load(fi)

    def find_best(self):
        """Findthe best motorbased on a score."""
        highscore = 0
        for block in self.file:
            cblock = self.file[block]
            if cblock["efficiency"] and cblock["power"] and cblock["thrust"] and cblock["weight"] != "0":
                try:
                    score = self.calculate_score(
                        cblock["efficiency"], cblock["power"], cblock["thrust"], cblock["weight"])
                except ZeroDivisionError:
                    print(cblock)
                if score > highscore:
                    self.best = block
                    highscore = score
        print(self.best)

    def calculate_score(self, eff, power, thrust, weight):
        """Calculate a score based of args.

        Arguments:
            eff {float/int} -- efficiency of the motor
            power {float/int} -- power the motor requres
            thrust {float/int} -- thrust the motor delivers
            weight {float/int} -- weight of the motor

        Returns:
            float -- score

        """
        score = float(eff) / float(weight) + float(eff) / float(thrust)
        return score


optimizer("motors.json")
